>>>>> TEST GET METHOD OF JobDocInfoServlet SERVLET <<<<<
Result response data after GET request:
--------------------------------------------
HTTP/1.1 200 OK Content-Type: json Access-Control-Allow-Origin: * Content-Length: 3083 Connection: keep-alive  { "MySQL": { "Database_Area": [ "MySQL.Database_Area.Top30Database.job", "MySQL.Database_Area.InnoDBTablespace_Free.job" ], "Database_Statistic": [ ], "Database_Structure": [ "MySQL.Database_Structure.DatabaseVersion.job", "MySQL.Database_Structure.Parameter.job" ], "FaultManagement": [ ], "Performance": [ "MySQL.Performance.MyISAMKeyBuffer.job", "MySQL.Performance.QueryCache.job", "MySQL.Performance.InnoDBIOStatus.job", "MySQL.Performance.InnoDBLogBuffer.job", "MySQL.Performance.Network_Traffic.job", "MySQL.Performance.InnoDBBufferPool.job", "MySQL.Performance.Sorts.job" ], "Proactive_Check": [ "MySQL.Proactive_Check.Thread.job", "MySQL.Proactive_Check.Resource_Limit.job", "MySQL.Proactive_Check.SQLExecutions.job", "MySQL.Proactive_Check.Aborted_Information.job" ], "Others": [ ] }, "SQL_Server": { "Database_Area": [ "SQL_Server.Database_Area.Database_free.job" ], "Database_Statistic": [ ], "Database_Structure": [ "SQL_Server.Database_Structure.Database_Version.job", "SQL_Server.Database_Structure.Parameters.job" ], "FaultManagement": [ ], "Performance": [ "SQL_Server.Performance.DATA_FILE_IO_STATUS.job", "SQL_Server.Performance.Memory_Management.job", "SQL_Server.Performance.Tempdb_Usage.job", "SQL_Server.Performance.Plan_Cache_Hit_Ratio.job", "SQL_Server.Performance.Wait_Status.job", "SQL_Server.Performance.Buffer_Cache_Hit_Ratio.job" ], "Proactive_Check": [ "SQL_Server.Proactive_Check.Batch_Requests.job", "SQL_Server.Proactive_Check.SESSION.job", "SQL_Server.Proactive_Check.RESOURCE_LIMIT.job" ], "Others": [ ] }, "Postgres": { "Database_Area": [ "Postgres.Database_Area.Tablespace_Free.job" ], "Database_Statistic": [ "Postgres.Database_Statistic.Database_Info.job" ], "Database_Structure": [ "Postgres.Database_Structure.Parameters.job", "Postgres.Database_Structure.Database_Version.job" ], "FaultManagement": [ ], "Performance": [ "Postgres.Performance.Buffer_Cache_Usage.job", "Postgres.Performance.Buffer_Cache_Hit.job", "Postgres.Performance.Datafile_IO_Info.job" ], "Proactive_Check": [ "Postgres.Proactive_Check.Session.job", "Postgres.Proactive_Check.Resource_Limit.job", "Postgres.Proactive_Check.Transactions.job" ], "Others": [ ] } }
--------------------------------------------
Check OK if content contains string : [MySQL] & [SQL_Server] & [Postgres]
[MESSAGE TEST] GET IS OK
>>>>> TEST POST METHOD OF DBCOMMONCONFIG SERVLET <<<<<
Result response data after POST request:
--------------------------------------------
{"jobName":"Postgres.Performance.Buffer_Cache_Usage","description":["Monitoring buffer cache.<br />\n <p>\n Showing all information used buffer cache in database: number of buffer cache free, used, dirty, ... <br />\n Create extension pg_buffercache to get data monitornig.<br />\n\n Dirty buffer is an area was taken memory but do not nothing. So, if dirty buffers is large will affect to speed access buffer other activities. <br />\n </p>"],"targetVersion":"From 8.3\n","param":{},"return":"Information use buffer cache\n","returnParams":{"SharedBuffersCnt":"Total number of buffer cache was allocated\n","UnusedBuffersCnt":"Number of buffer cache was not used\n","UsedBuffersCnt":"Number of buffer cache was used\n","DirtyBuffersCnt":"Number of buffer cache was dirtied\n","UsedCacheRatioPct":"Percentage of buffer cache was used\n","DirtyCacheRatioPct":"Percentage of buffer cache was dirtied"}}
--------------------------------------------
Check OK if content contains string : [SharedBuffersCnt:Total number of buffer cache was allocated]
[MESSAGE TEST] POST IS OK
